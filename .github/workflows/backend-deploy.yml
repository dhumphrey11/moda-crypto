name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: moda-crypto-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=$REGION \
          --description="Docker repository for $SERVICE_NAME" || echo "Repository already exists"

    - name: Build Docker image
      run: |
        cd backend
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA .
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest .

    - name: Push Docker image to Artifact Registry
      run: |
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --concurrency 100 \
          --max-instances 10 \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" \
          --set-env-vars="FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" \
          --set-env-vars="FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" \
          --set-env-vars="FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" \
          --set-env-vars="COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY }}" \
          --set-env-vars="MORALIS_API_KEY=${{ secrets.MORALIS_API_KEY }}" \
          --set-env-vars="COVALENT_API_KEY=${{ secrets.COVALENT_API_KEY }}" \
          --set-env-vars="LUNARCRUSH_API_KEY=${{ secrets.LUNARCRUSH_API_KEY }}" \
          --set-env-vars="COINMARKETCAL_API_KEY=${{ secrets.COINMARKETCAL_API_KEY }}" \
          --set-env-vars="CRYPTOPANIC_API_KEY=${{ secrets.CRYPTOPANIC_API_KEY }}" \
          --set-env-vars="COINBASE_API_KEY=${{ secrets.COINBASE_API_KEY }}" \
          --set-env-vars="COINBASE_API_SECRET=${{ secrets.COINBASE_API_SECRET }}"

    - name: Get deployment URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "BACKEND_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Test deployment
      run: |
        # Wait for deployment to be ready
        echo "Waiting for deployment to stabilize..."
        sleep 60
        
        # Test health endpoint with retries
        for i in {1..3}; do
          if curl -f "$BACKEND_URL/health"; then
            echo "Health check passed on attempt $i"
            break
          else
            echo "Health check failed on attempt $i, retrying..."
            sleep 20
          fi
        done
        
        # Test root endpoint
        curl -f "$BACKEND_URL/" -L || echo "Root endpoint test failed but continuing"

    - name: Update Cloud Scheduler jobs (optional)
      run: |
        # Update existing Cloud Scheduler jobs with new service URL
        # This is optional and assumes you have Cloud Scheduler jobs set up
        
        # Example: Update fetch job
        gcloud scheduler jobs update http fetch-coingecko \
          --uri="$BACKEND_URL/fetch/coingecko" \
          --location=$REGION || echo "No existing scheduler job to update"

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Backend deployment successful!"
        echo "üöÄ Service URL: $BACKEND_URL"
        echo "üìä Health check: $BACKEND_URL/health"
        echo "üìñ API docs: $BACKEND_URL/docs"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Backend deployment failed!"
        echo "Check the logs above for error details."