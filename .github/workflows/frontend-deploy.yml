name: Deploy Frontend to Firebase Hosting

on:
  push:
    branches: [ main ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
      - 'firebase.json'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        cat > .env.local << EOF
        NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        NEXT_PUBLIC_BACKEND_URL=${{ secrets.BACKEND_URL }}
        EOF

    - name: Lint code
      run: |
        cd frontend
        npm run lint || echo "Linting completed with warnings"

    - name: Build project
      run: |
        cd frontend
        echo "Building Next.js project..."
        npm run build
        
        # Verify static export was created
        echo "Checking output directory..."
        if [ -d "out" ]; then
          echo "‚úÖ Output directory exists"
          ls -la out/ | head -10
          
          if [ -f "out/index.html" ]; then
            echo "‚úÖ index.html found"
          else
            echo "‚ùå index.html not found"
            exit 1
          fi
        else
          echo "‚ùå out directory not found"
          echo "Available directories:"
          ls -la
          exit 1
        fi

    - name: Run tests (if any)
      run: |
        cd frontend
        # npm run test || echo "No tests configured"

    - name: Setup Firebase CLI
      run: |
        npm install -g firebase-tools

    - name: Create Firebase config
      run: |
        cd frontend
        
        # Use the root firebase.json if it exists, otherwise create a local one
        if [ -f "../firebase.json" ]; then
          echo "Using root firebase.json configuration"
          cp ../firebase.json ./firebase.json
        else
          echo "Creating local firebase.json configuration"
          cat > firebase.json << EOF
        {
          "hosting": {
            "public": "out",
            "ignore": [
              "firebase.json",
              "**/.*",
              "**/node_modules/**"
            ],
            "rewrites": [
              {
                "source": "**",
                "destination": "/index.html"
              }
            ],
            "headers": [
              {
                "source": "/_next/static/**",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "public, max-age=31536000, immutable"
                  }
                ]
              }
            ]
          }
        }
        EOF
        fi

    - name: Deploy to Firebase Hosting
      run: |
        cd frontend
        
        echo "Setting up Firebase authentication..."
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
        
        echo "Initializing Firebase project..."
        firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
        
        echo "Verifying build output..."
        ls -la out/
        
        echo "Deploying to Firebase Hosting..."
        firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID }} --debug

    - name: Get deployment URL
      run: |
        PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        HOSTING_URL="https://$PROJECT_ID.web.app"
        echo "FRONTEND_URL=$HOSTING_URL" >> $GITHUB_ENV
        echo "Frontend deployed at: $HOSTING_URL"

    - name: Test deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Test if the site is accessible
        curl -f "$FRONTEND_URL" -L || exit 1
        echo "Frontend accessibility test passed"

    - name: Clean up
      if: always()
      run: |
        cd frontend
        rm -f firebase-service-account.json
        rm -f .env.local

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Frontend deployment successful!"
        echo "üöÄ Site URL: $FRONTEND_URL"
        echo "üîß Firebase Console: https://console.firebase.google.com/project/${{ secrets.FIREBASE_PROJECT_ID }}/hosting"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Frontend deployment failed!"
        echo "Check the logs above for error details."

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app
        uploadArtifacts: true
        temporaryPublicStorage: true